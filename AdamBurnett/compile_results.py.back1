#Created by: Adam Burnett
#Email:adam.burnett@byu.edu
import os
import glob
import math
import datetime
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as pl
import numpy as np

#change these when switching machines
MOUNT = "/home/adam/mount/users/adamh5/logs/"
BOARD = "Burn"
THESIS_DIR = "/home/adam/Thesis/"
LOGS_DIR = "logs/XMD/"
TIMING_LOGS = THESIS_DIR + 'logs/XMD/*.log'
burnCurrentLogs = MOUNT + 'Burn_Current/*.log'
burnCurrentValues = []
burnCurrentTimes = []
#end

#Variable Declarations
diodeLogs = MOUNT + "Diode/*.log"
thermistorLogs = MOUNT + "Thermistor/*.log"
oneTwoLogs = MOUNT + BOARD + "-1.2V/*.log"
twoFiveLogs = MOUNT + BOARD + "-2.5V/*.log"
threeThreeLogs = MOUNT + BOARD + "-3.3V/*.log"
diodeValues = []
thermistorValues = []
oneTwoValues = []
twoFiveValues = []
threeThreeValues = []
diodeTimes = []
thermistorTimes = []
oneTwoTimes = []
twoFiveTimes = []
threeThreeTimes = []
error = 0
num_values = 7
testRegion = "Test Region"
controlRegion = "Control Region"
originalControlAverage = 0
originalTestAverage = 0
controlPercentages = []
testPercentages = []
timingTimes = []
controlPercentFromRec = 0
testPercentFromRec = 0

controlAverageArray = []
testAverageArray = []

#Magic Values
burnTimes = range(0,48)
		
#Get the date of the next to most recent log
logs = sorted(glob.glob(THESIS_DIR + "logs/XMD/*.log"))
logs.sort(key=os.path.getmtime)

degradation = [0.0554,
0.0561,
0.0568,
0.0568,
0.0566,
0.0566,
0.0565,
0.0572,
0.0579,
0.0579,
0.0577,
0.0577,
0.0575,
0.0575,
0.0574,
0.0574,
0.0572,
0.0572,
0.0571,
0.0578,
0.0585,
0.0585,
0.0583,
0.0583,
0.0581,
0.0581,
0.058 ,
0.058 ,
0.0578,
0.0578,
0.0577,
0.0584,
0.0591,
0.0591,
0.0589,
0.0589,
0.0587,
0.0587,
0.0586,
0.0586,
0.0584,
0.0584,
0.0583,
0.059 ,
0.0597,
0.0597,
0.0595,
0.0595,
0.0593,
0.0593,
0.0592,
0.0592,
0.059 ,
0.059 ,
0.0589,
0.0596,
0.0603,
0.0603,
0.0601,
0.0601,
0.0599,
0.0599,
0.0598,
0.0598,
0.0596,
0.0596,
0.0595,
0.0602,
0.0609,
0.0609,
0.0607,
0.0607,
0.0605,
0.0605,
0.0604,
0.0604,
0.0602,
0.0602,
0.0601,
0.0608,
0.0615,
0.0615,
0.0613,
0.0613,
0.0611,
0.0611,
0.061 ,
0.061 ,
0.0608,
0.0608,
0.0607,
0.0614,
0.0621,
0.0621,
0.0619,
0.0619,
0.0617,
0.0617,
0.0616,
0.0616,
0.0614,
0.0614,
0.0613,
0.062 ,
0.0627,
0.0627,
0.0625,
0.0625,
0.0623,
0.0623,
0.0622,
0.0622,
0.062 ,
0.062 ,
0.0619,
0.0626,
0.0633,
0.0633,
0.0631,
0.0631,
0.0629,
0.0629,
0.0628,
0.0628,
0.0626,
0.0626,
0.0625,
0.0632,
0.0639,
0.0639,
0.0637,
0.0637,
0.0635,
0.0635,
0.0634,
0.0634,
0.0632,
0.0632,
0.0631,
0.0638,
0.0645,
0.0645,
0.0643,
0.0643,
0.0641,
0.0641,
0.064 ,
0.064 ,
0.0638,
0.0638,
0.0637,
0.0644,
0.0651,
0.0651,
0.0649,
0.0649,
0.0647,
0.0647,
0.0646,
0.0646,
0.0644,
0.0644,
0.0643,
0.065 ,
0.0657,
0.0657,
0.0655,
0.0655,
0.0653,
0.0653,
0.0652,
0.0652,
0.065 ,
0.065 ,
0.0649,
0.0656,
0.0663,
0.0663,
0.0661,
0.0661,
0.0659,
0.0659,
0.0658,
0.0658,
0.0656,
0.0656,
0.0655,
0.0662,
0.0669,
0.0669,
0.0667,
0.0667,
0.0665,
0.0665,
0.0664,
0.0664,
0.0662,
0.0662,
0.0661,
0.0668,
0.0675,
0.0675,
0.0673,
0.0673,
0.0671,
0.0671,
0.067 ,
0.067 ,
0.0668,
0.0668,
0.0667,
0.0674,
0.0681,
0.0681,
0.0679,
0.0679,
0.0677,
0.0677,
0.0676,
0.0676,
0.0674,
0.0674,
0.0673,
0.068 ,
0.0687,
0.0687,
0.0685,
0.0685,
0.0683,
0.0683,
0.0682,
0.0682,
0.068 ,
0.068 ,
0.0679,
0.0686,
0.0693,
0.0693,
0.0691,
0.0691,
0.0689,
0.0689,
0.0688,
0.0688,
0.0686,
0.0686,
0.0685,
0.0692,
0.0699,
0.0699,
0.0697,
0.0697,
0.0695,
0.0695,
0.0694,
0.0694,
0.0692,
0.0692,
0.0691,
0.0698,
0.0705,
0.0705,
0.0703,
0.0703,
0.0702,
0.0709,
0.0716,
0.0716,
0.0714,
0.0714,
0.0713,
0.072 ,
0.0727,
0.0727,
0.0725,
0.0725,
0.0724,
0.0724,
0.0722,
0.0722,
0.0721,
0.0728,
0.0735,
0.0735,
0.0733,
0.0733,
0.0733,
0.0731,
0.0731,
0.073 ,
0.0737,
0.0744,
0.0744,
0.0742,
0.0742,
0.0741,
0.0748,
0.0755,
0.0755,
0.0753,
0.0753,
0.0752,
0.0759,
0.0766,
0.0766,
0.0764,
0.0764,
0.0763,
0.0763,
0.0761,
0.0761,
0.076 ,
0.0767,
0.0774,
0.0774,
0.0772,
0.0772,
0.0772,
0.077 ,
0.077 ,
0.0769,
0.0776,
0.0783,
0.0783,
0.0781,
0.0781,
0.078 ,
0.0787,
0.0794,
0.0794,
0.0792,
0.0792,
0.0791,
0.0798,
0.0805,
0.0805,
0.0803,
0.0803,
0.0802,
0.0802,
0.08  ,
0.08  ,
0.0799,
0.0806,
0.0813,
0.0813,
0.0811,
0.0811,
0.0811,
0.0809,
0.0809,
0.0808,
0.0815,
0.0822,
0.0822,
0.082 ,
0.082 ,
0.0819,
0.0826,
0.0833,
0.0833,
0.0831,
0.0831,
0.083 ,
0.0837,
0.0844,
0.0844,
0.0842,
0.0842,
0.0841,
0.0841,
0.0839,
0.0839,
0.0838,
0.0845,
0.0852,
0.0852,
0.085 ,
0.085 ,
0.085 ,
0.0848,
0.0848,
0.0847,
0.0854,
0.0861,
0.0861,
0.0859,
0.0859,
0.0858,
0.0865,
0.0872,
0.0872,
0.087 ,
0.087 ,
0.0869,
0.0876,
0.0883,
0.0883,
0.0881,
0.0881,
0.088 ,
0.088 ,
0.0878,
0.0878,
0.0877,
0.0884,
0.0891]

if (len(logs) > 1):
        recent = logs[len(logs)-2]
        recentname = recent.split('-')
        recentdate = recentname[1].replace(".","/") + " " + recentname[2].replace(".log","").replace(".",":")

else:
        recentdate = ""
		

def getData( path, format, data = [], hours = [] ):
	"Builds average data and times arrays"
	logFiles = sorted(glob.glob(path))
	logFiles.sort(key=os.path.getmtime)

	if (len(logFiles) > 0):
		firstLog = logFiles[0]
		firstDateString = firstLog.split('-',1)[-1]
		firstDate = datetime.datetime.strptime(firstDateString, format) 
		
		for i,log in enumerate(logFiles):
			#find the average over an hour (log)
			temp = []
			currentDateString = log.split('-',1)[-1]
			currentDate = datetime.datetime.strptime(currentDateString, format)
			
			with open(log, "r") as ifile:
				temp = map(float, ifile)
			data.append(sum(temp) / len(temp))
			#add how many hours it has been onto the time array
			timeDifference = currentDate - firstDate
			hours.append(timeDifference.days*24+timeDifference.seconds/3600)
			if (i == len(logFiles) - 2):
				break
				
		
	else:
		print "No Log files present!"
		error = 1

def sort(logs):
	for i in range(1,len(logs)):
		for j in range(0,len(logs)-1):
			if (parseDate(logs[j]) > parseDate(logs[j+1])):
				swap(j, j+1, logs)
			
def swap(i, j, logs):
	temp = logs[i]
	logs[i] = logs[j]
	logs[j] = temp

def parseDate(logFile):
	date = datetime.datetime.strptime(logFile, THESIS_DIR + LOGS_DIR + 'output-%m.%d.%y-%H.%M.log')
	return date

def getTimingData( controlData = [], testData = [], timingData = [] ):
	"Gets the control and test region data"
	global testPercentFromRec
	global controlPercentFromRec
	logFiles = sorted(glob.glob(TIMING_LOGS))

	sort(logFiles)

	tempTest = []
	tempControl = []
	originalDate = ""
	format = '%m.%d.%y-%H.%M.log'
	
	if (len(logFiles) > 0):
		originalLog = logFiles[0]
		firstDateString = originalLog.split('-',1)[-1]
		originalDate = datetime.datetime.strptime(firstDateString, format)
		os.system("sed -i 's/^M//' " + originalLog)
		#get original characterization values
		with open(originalLog, "r") as ifile:
			for line in ifile:
				if testRegion in line:
					for i in range(0,num_values):
						line = ifile.next()
						tempTest.append(int(line))
					ifile.next()
					for i in range(0,num_values):
						line = ifile.next()
						tempControl.append(int(line))
		ifile.close()
		
		#calculate original averages
		originalControlAverage = sum(tempControl) / len(tempControl)
		originalTestAverage = sum(tempTest) / len(tempTest)
		
		#get all values and fill array
		for log in logFiles:
			tempTest = []
			tempControl = []
			with open(log, "r") as ifile:
				for line in ifile:
					if testRegion in line:
						for i in range(0,num_values):
							line = ifile.next()
							tempTest.append(int(line))
						ifile.next()
						for i in range(0,num_values):
							line = ifile.next()
							tempControl.append(int(line))
			
			#find the date
			currentDateString = log.split('-',1)[-1]
			currentDate = datetime.datetime.strptime(currentDateString, format)
			#find the time difference in hours and append
			timeDifference = currentDate - originalDate
			hoursFromStart = timeDifference.days*24+timeDifference.seconds/3600
			timingData.append(hoursFromStart)
					
			controlAverage = sum(tempControl) / len(tempControl)
			testAverage = sum(tempTest) / len(tempTest)
			
			burnFactor = degradation[hoursFromStart]
			#Checking to see if time of experiment was a burn hour
			# if hoursFromStart == 0:
				# burnFactor = 0
			# elif hoursFromStart == 3:
				# burnFactor = 0.0012
			# elif hoursFromStart == 4:
				# burnFactor = 0.0011
			# elif hoursFromStart == 6:
				# burnFactor = 0.00105
			# elif hoursFromStart == 9:
				# burnFactor = 0.0026
			# elif hoursFromStart == 10:
				# burnFactor = 0.0025
			# elif hoursFromStart == 12:
				# burnFactor = 0.00245
			# elif hoursFromStart == 15:
				# burnFactor = 0.004
			# elif hoursFromStart == 16:
				# burnFactor = 0.0039
			# elif hoursFromStart == 18:
				# burnFactor = 0.00385
			# elif hoursFromStart == 21:
				# burnFactor = 0.0054
			# elif hoursFromStart == 22:
				# burnFactor = 0.0053
			# elif hoursFromStart == 24:
				# burnFactor = 0.00525
			# elif hoursFromStart == 27:
				# burnFactor = 0.0068
			# elif hoursFromStart == 28:
				# burnFactor = 0.0067
			# elif hoursFromStart == 30:
				# burnFactor = 0.00665
			# elif hoursFromStart == 33:
				# burnFactor = 0.0082
			# elif hoursFromStart == 34:
				# burnFactor = 0.0081
			# elif hoursFromStart == 36:
				# burnFactor = 0.00805
			# elif hoursFromStart == 39:
				# burnFactor = 0.0096
			# elif hoursFromStart == 40:
				# burnFactor = 0.0095
			# elif hoursFromStart == 42:
				# burnFactor = 0.00945
			# elif hoursFromStart == 45:
				# burnFactor = 0.011
			# elif hoursFromStart == 46:
				# burnFactor = 0.0109
			# elif hoursFromStart == 48:
				# burnFactor = 0.01085
			# elif hoursFromStart == 51:
				# burnFactor = 0.0124
			# elif hoursFromStart == 52:
				# burnFactor = 0.0123
			# elif hoursFromStart == 54:
				# burnFactor = 0.01225
			# elif hoursFromStart == 57:
				# burnFactor = 0.0138
			# elif hoursFromStart == 58:
				# burnFactor = 0.0137
			# elif hoursFromStart == 60:
				# burnFactor = 0.01365
			# elif hoursFromStart == 63:
				# burnFactor = 0.0152
			# elif hoursFromStart == 64:
				# burnFactor = 0.0151
			# elif hoursFromStart == 66:
				# burnFactor = 0.01505
			# elif hoursFromStart == 69:
				# burnFactor = 0.0166
			# elif hoursFromStart == 70:
				# burnFactor = 0.0165
			# else:
				# burnFactor = 0
				
			testAverage *= (1-burnFactor)
			
			controlAverageArray.append(controlAverage)
			testAverageArray.append(testAverage)
			
			testPercentFromOrig = 100*(originalTestAverage - testAverage)/float(originalTestAverage)
			controlPercentFromOrig = 100*(originalControlAverage - controlAverage)/float(originalControlAverage)
			
			controlData.append(controlPercentFromOrig)
			testData.append(testPercentFromOrig)
			
			
		
		#compare recent
		if (len(testAverageArray) > 1):
			newestCtrl = controlAverageArray[len(controlAverageArray)-1]
			recentCtrl = controlAverageArray[len(controlAverageArray)-2]
			newestTest = testAverageArray[len(testAverageArray)-1]
			recentTest = testAverageArray[len(testAverageArray)-2]
			controlPercentFromRec = 100*(recentCtrl-newestCtrl)/float(recentCtrl)
			testPercentFromRec = 100*(recentTest-newestTest)/float(recentTest)
		
	else:
		print "Timing data missing!"
		error = 2
def plotData( xvalues, yvalues, title, xlabel, ylabel, label, filename ):
	"Plots the data passed in"
	plot = pl.plot(xvalues, yvalues, 'bo', label=label)
	pl.legend(loc='upper center', bbox_to_anchor=(0.5,-0.1))
	x1,x2,y1,y2 = pl.axis()
	pl.axis([x1, x2, min(yvalues)-.2, max(yvalues)+.2])
	pl.title(title)
	pl.xlabel(xlabel)
	pl.ylabel(ylabel)
	pl.savefig(filename)
	pl.clf()

def plotTiming( timing, control, test, filename ):
	testPlot, = pl.plot(timing, test, 'bo', label='Test Region')
	controlplot, = pl.plot(timing, control, 'ro', label='Control Region')
	x1,x2,y1,y2 = pl.axis()
	
	timingAxis = np.linspace(1,len(control),len(control))

	controlCoeff = np.polyfit(timingAxis, control, 1)
	testCoeff = np.polyfit(timingAxis, test, 1)

	controlLine = []
	testLine = []

	for x in range(0, len(control)):
		controlLine.append(controlCoeff[0]*timingAxis[x] + controlCoeff[1])
		testLine.append(testCoeff[0]*timingAxis[x] + testCoeff[1])

	pl.plot(timing, testLine, linestyle='solid', color='blue')
	pl.plot(timing, controlLine, linestyle='solid', color='red')
	
	legend = pl.legend(loc='upper center', bbox_to_anchor=(0.5,-0.1))
	pl.axis([x1,x2, min(test)-.2, max(test)+.2])
	pl.title('Characterization Results')
	pl.xlabel('Time: Hours from start of experiments')
	pl.ylabel('Percentage Change from Original')
	pl.subplots_adjust(bottom=0.2)
	pl.savefig(filename)
	pl.clf()

#Get all of the data to plot
getData( diodeLogs, '%m.%d.%Y-%H.log', diodeValues, diodeTimes )
getData( thermistorLogs, '%m.%d.%Y-%H.log', thermistorValues, thermistorTimes )
getData( oneTwoLogs, '1.2V/1.2V-%m.%d.%Y-%H.log', oneTwoValues, oneTwoTimes )
getData( twoFiveLogs, '2.5V/2.5V-%m.%d.%Y-%H.log', twoFiveValues, twoFiveTimes )
getData( threeThreeLogs, '3.3V/3.3V-%m.%d.%Y-%H.log', threeThreeValues, threeThreeTimes )
getData( burnCurrentLogs, '%m.%d.%Y-%H.log', burnCurrentValues, burnCurrentTimes )
getTimingData( controlPercentages, testPercentages, timingTimes )

#plot the data
#Timing
plotTiming( timingTimes, controlPercentages, testPercentages, 'logs/current.png')
#Diode
plotData( diodeTimes, diodeValues, 'Temperature', 'Hours since experiments began', 'Average Temperature (C)', 'Temperature', 'logs/diode.png' )
#Thermistor
plotData( thermistorTimes, thermistorValues, 'Oven Thermistor Data', 'Hours since experiments began', 'Average Temperature (C)', 'Thermistor', 'logs/thermistor.png' )
#1.2V
plotData( oneTwoTimes, oneTwoValues, '1.2V Supply', 'Hours since experiments began', 'Average Voltage (V)', '1.2V', 'logs/1.2V.png' )
#2.5V
plotData( twoFiveTimes, twoFiveValues, '2.5V Supply', 'Hours since experiments began', 'Average Voltage (V)', '2.5V', 'logs/2.5V.png' )
#3.3V
plotData( threeThreeTimes, threeThreeValues, '3.3V Supply', 'Hours since experiments began', 'Average Voltage (V)', '3.3V', 'logs/3.3V.png' )
#1.2V Current
plotData( burnCurrentTimes, burnCurrentValues, '1.2V Supply Current (Burn Board)', 'Hours since experiments began', 'Current (A)', 'Current', 'logs/burn_current.png' )


#Write message to file

message = open("message.txt", 'w')
message.truncate()

message.write("Hi all, \r\n\nHere are the most recent results:\r\nLast characterization previous to this one: " + recentdate + 
			 "\r\n\nTest Region\r\n\nCurrent Average: " + str(testAverageArray[len(testAverageArray)-1]) + "\r\nDifference from original characterization: " + str(testPercentages[len(testPercentages)-1]) + 
			 "%\r\nDifference from most recent characterization: " + str(testPercentFromRec) + "%\r\n\r\nControl Region \r\n\nCurrent Average: " + str(controlAverageArray[len(controlAverageArray)-1]) 
			 + "\r\nDifference from original characterization: " + str(controlPercentages[len(controlPercentages)-1]) + "%\r\nDifference from most recent characterization: " + str(controlPercentFromRec) 
			 + "%\r\n\nI have attached the log files and the current plots for reference.\r\n\nAdam Burnett")

message.close()
