//----------------------------------------------------------------------
// This File: fifo1.sv
//
// Copyright 2003-2014 Sunburst Design, Inc.
//
// Sunburst Design (Beaverton, OR): 
//            cliffc@sunburst-design.com
//            www.sunburst-design.com
//----------------------------------------------------------------------
module fifo1 (
  output logic [7:0] dout, 
  output logic       full, empty,
  input  logic       write, read, clk, rst_n,
  input  logic [7:0] din);

  logic [7:0] fifomem [0:15];
  logic [3:0] wptr, rptr;
  logic [3:0] cnt; //REMOVED BUG 2: Count Can never be greater than 15:changed range of cnt from 3:0 to 4:0

  always_ff @(posedge clk or negedge rst_n)
    if (!rst_n) begin
      wptr  <= '0;
      rptr  <= '0; //BUG 1: Read Pointer not Reset : Added Reset 
      cnt   <= '0;
      empty <= '1;
      full  <= '0;
    end
    else 
      case ({write, read})
        2'b00: ;     // no fifo write or read
        2'b01: begin // fifo read
                 full <= '0;
                 if (cnt>0) begin //BUG 3:  rptr and cnt should only be updated when fifo is not empty: added if cnt > 0
	           rptr <= rptr + 1;
	           cnt  <= cnt  - 1;
		   if (cnt==1) empty <= '1; //BUG 7: Empty Should only be raised if cnt == 1
		 end
                 
               end
        2'b10: begin // fifo write
                 empty <= '0;
                 if (cnt<=16) begin
                   wptr <= wptr + 1;
                   cnt  <= cnt  + 1;
                 end
                 if (cnt>=15) full <= '1;  //BUG 5: cnt will be incremented; so need >= rather than just > 15
               end
        2'b11: // fifo write & read
                 if (full) begin
                   rptr  <= rptr + 1;
                   cnt   <= cnt  - 1;
		   full <= '0; //BUG 6: Since write did not success we need to lower full: Added this line 
                 end
                 else if (empty) begin
                   wptr  <= wptr + 1;
                   cnt   <= cnt  + 1;
                 end
                 else begin
                   wptr  <= wptr + 1;
                   rptr  <= rptr + 1;
		   if(cnt>15) full <= '1; //Bug 4: Full should continue to be asserted here 
                 end
      endcase

  // FIFO synchronous memory write operation
  always_ff @(posedge clk)
    if (write && ((cnt <16) || ((cnt==16) && read)))
      fifomem[wptr] <= din;

  assign dout = fifomem[rptr];

`ifndef ASSERT_MACROS

 `define ASSERT_MACROS
  
 `define assert_clk(arg, ck=clk) \
   assert property (@(posedge ck) disable iff (!rst_n) arg)

 `define assert_async_rst(arg, ck=clk) \
   assert property (@(posedge ck) arg)
       
`endif

   ERROR_FIFO_RESET_SHOULD_CAUSE_EMPTY1_FULL0_RPTR0_WPTR0_CNT0:
     `assert_async_rst(!rst_n |-> (rptr==0 && wptr==0 && empty==1 && full==0 && cnt==0));
   ERROR_FIFO_SHOULD_BE_FULL:
     `assert_clk(cnt>15 |-> full);
   ERROR_FIFO_SHOULD_NOT_BE_FULL:
     `assert_clk(cnt<16 |-> !full);
   ERROR_FIFO_DID_NOT_GO_FULL:
     `assert_clk(cnt==15 && write && !read |-> ##1 full);
   ERROR_FIFO_SHOULD_BE_EMPTY:
     `assert_clk(cnt==0 |-> empty);
   ERROR_FIFO_SHOULD_NOT_BE_EMPTY:
     `assert_clk(cnt>0 |-> !empty);
   ERROR_FIFO_DID_NOT_GO_EMPTY:
     `assert_clk(cnt==1 && read && !write |-> ##1 empty);
   //ERROR_FIFO_COUNT_DID_NOT_INCREMENT:
   //  `assert_clk(write && !read |-> ##1 ...
   //ERROR_FIFO_COUNT_DID_NOT_DECREMENT:
   //ERROR_FIFO_COUNT_DID_NOT_REMAIN_THE_SAME:
   //READ_POINTER_SHOULD_NOT_CHANGE
endmodule